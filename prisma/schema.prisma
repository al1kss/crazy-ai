generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  hashedEmail String   @unique @map("hashed_email")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  password        String? @map("password")
  passwordHash    String?  @map("password_hash")
  lastLoginAt     DateTime? @map("last_login_at")
  failedLoginAttempts Int @default(0) @map("failed_login_attempts")
  lockedUntil     DateTime? @map("locked_until")
  passwordResetToken String? @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")

  subscriptionType String @default("free") @map("subscription_type")
  preferences      Json   @default("{}")
  isActive         Boolean @default(true) @map("is_active")

  customAis      CustomAI[]
  conversations  Conversation[]
  sessions       UserSession[]
  ragInstances   RAGInstance[]
  knowledgeFiles KnowledgeFile[]

  @@map("users")
}

model CustomAI {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  name            String
  description     String?
  knowledgeFiles  Json     @default("[]") @map("knowledge_files")
  blobUrls        Json     @default("[]") @map("blob_urls")
  chunksCount     Int      @default(0) @map("chunks_count")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  isActive        Boolean  @default(true) @map("is_active")

  ragInstanceId   String?  @db.Uuid @map("rag_instance_id")
  ragInstance     RAGInstance? @relation(fields: [ragInstanceId], references: [id])

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("custom_ais")
}

model Conversation {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id")
  aiType    String   @map("ai_type")
  aiId      String?  @map("ai_id")
  title     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isActive  Boolean  @default(true) @map("is_active")

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  customAI CustomAI?  @relation(fields: [aiId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(uuid()) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  role           String   // "user" or "assistant"
  content        String
  metadata       Json     @default("{}") // store context, mode, tokens used, etc.
  createdAt      DateTime @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  tokenHash   String   @unique @map("token_hash")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsedAt  DateTime @default(now()) @map("last_used_at")
  userAgent   String?  @map("user_agent")
  ipAddress   String?  @map("ip_address")
  isActive    Boolean  @default(true) @map("is_active")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model SystemStats {
  id              String   @id @default(cuid())
  totalUsers      Int      @default(0) @map("total_users")
  totalAIs        Int      @default(0) @map("total_ais")
  totalMessages   Int      @default(0) @map("total_messages")
  date            DateTime @unique

  @@map("system_stats")
}

model RAGInstance {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String?  @map("user_id")
  aiType          String   @map("ai_type")
  aiId            String?  @map("ai_id")
  name            String
  description     String?

  graphBlobUrl    String   @map("graph_blob_url")
  vectorBlobUrl   String   @map("vector_blob_url")
  configBlobUrl   String   @map("config_blob_url")

  totalChunks     Int      @default(0) @map("total_chunks")
  totalTokens     Int      @default(0) @map("total_tokens")
  fileCount       Int      @default(0) @map("file_count")

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  lastAccessedAt  DateTime @default(now()) @map("last_accessed_at")

  status          String   @default("active")
  processingLog   String?  @map("processing_log")

  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  customAIs       CustomAI[]
  knowledgeFiles  KnowledgeFile[]

  @@unique([aiType, userId, aiId])
  @@map("rag_instances")
}

model KnowledgeFile {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id")
  ragInstanceId String   @map("rag_instance_id") @db.Uuid

  filename      String
  originalName  String   @map("original_name")
  fileType      String   @map("file_type")
  fileSize      Int      @map("file_size")

  blobUrl       String   @map("blob_url")
  contentText   String?  @map("content_text")

  processedAt   DateTime? @map("processed_at")
  processingStatus String @default("pending") @map("processing_status")
  tokenCount    Int      @default(0) @map("token_count")

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ragInstance   RAGInstance @relation(fields: [ragInstanceId], references: [id], onDelete: Cascade)

  @@map("knowledge_files")
}

model ConversationMessages {
  id             String   @id @default(uuid()) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  role           String   // user or assistant
  content        String
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("conversation_messages")
}
